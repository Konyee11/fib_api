name: "CI/CD Pipeline"

on:
  push:
    branches:
      - main

jobs:
  runs-on: ubuntu-latest

  steps:
    # 1. リポジトリのコードをチェックアウト
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Docker ログイン(ECRにログイン)
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        region: ${{ secrets.AWS_REGION }}

    # 3. Docker イメージをビルド
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.ECR_REPOSITORY}} .
        docker tag ${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

    # 4. Docker イメージをECRにプッシュ
    - name: Push Docker image to Amazon ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

    # 5. ECSタスク定義の更新
      - name: Update ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-def.json  # タスク定義ファイルのパス
          container-name: fib-api    # タスク定義内のコンテナ名
          image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      # 6. ECSサービスの更新
      - name: Deploy to ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true
